# syntax=docker/dockerfile:1

# ---------- Build stage ----------
FROM node:22-slim AS build
# All comments in code strictly in English
ENV NODE_ENV=development
WORKDIR /app

# Install base tools for native builds if needed
RUN apt-get update && apt-get install -y --no-install-recommends \
    python3 make g++ pkg-config \
 && rm -rf /var/lib/apt/lists/*

# Copy manifests first to leverage Docker layer cache
COPY package*.json ./
COPY .npmrc ./.npmrc
RUN npm ci

# Copy sources and build
COPY . .
 
# Expose Next.js public env at build time so they are inlined in the bundle
ARG NEXT_PUBLIC_API_BASE_URL
ARG NEXT_PUBLIC_BASE_URL
ARG NEXT_PUBLIC_BASE_PATH
ARG NEXT_PUBLIC_VERIFICATION_CODE_TTL
ARG NEXT_PUBLIC_JWT_EXPIRATION_MINUTES
ARG NEXT_PUBLIC_SEGMENT_WRITE_KEY
ARG NEXT_PUBLIC_SEGMENT_ENABLED
ARG NEXT_PUBLIC_SEGMENT_DEBUG
ARG NEXT_PUBLIC_ANALYTICS_IDENTITY_FRONTEND
ARG NEXT_PUBLIC_ANALYTICS_SAMPLE_VIEW_CHANGED
ARG NEXT_PUBLIC_ANALYTICS_VIA_BEACON
ARG NEXT_PUBLIC_ANALYTICS_DISABLE_PULSES
ARG NEXT_PUBLIC_ANALYTICS_SAMPLE_CONTENT_PULSES

ENV NEXT_PUBLIC_API_BASE_URL=$NEXT_PUBLIC_API_BASE_URL \
    NEXT_PUBLIC_BASE_URL=$NEXT_PUBLIC_BASE_URL \
    NEXT_PUBLIC_BASE_PATH=$NEXT_PUBLIC_BASE_PATH \
    NEXT_PUBLIC_VERIFICATION_CODE_TTL=$NEXT_PUBLIC_VERIFICATION_CODE_TTL \
    NEXT_PUBLIC_JWT_EXPIRATION_MINUTES=$NEXT_PUBLIC_JWT_EXPIRATION_MINUTES \
    NEXT_PUBLIC_SEGMENT_WRITE_KEY=$NEXT_PUBLIC_SEGMENT_WRITE_KEY \
    NEXT_PUBLIC_SEGMENT_ENABLED=$NEXT_PUBLIC_SEGMENT_ENABLED \
    NEXT_PUBLIC_SEGMENT_DEBUG=$NEXT_PUBLIC_SEGMENT_DEBUG \
    NEXT_PUBLIC_ANALYTICS_IDENTITY_FRONTEND=$NEXT_PUBLIC_ANALYTICS_IDENTITY_FRONTEND \
    NEXT_PUBLIC_ANALYTICS_SAMPLE_VIEW_CHANGED=$NEXT_PUBLIC_ANALYTICS_SAMPLE_VIEW_CHANGED \
    NEXT_PUBLIC_ANALYTICS_VIA_BEACON=$NEXT_PUBLIC_ANALYTICS_VIA_BEACON \
    NEXT_PUBLIC_ANALYTICS_DISABLE_PULSES=$NEXT_PUBLIC_ANALYTICS_DISABLE_PULSES \
    NEXT_PUBLIC_ANALYTICS_SAMPLE_CONTENT_PULSES=$NEXT_PUBLIC_ANALYTICS_SAMPLE_CONTENT_PULSES
# Ensure Next.js builds with production semantics
RUN NODE_ENV=production npm run build

# ---------- Runtime stage ----------
FROM node:22-slim AS runtime
ENV NODE_ENV=production
WORKDIR /app

# Create non-root user
RUN useradd -m -u 10001 nodeuser

# Copy only what's required to run
COPY package*.json ./
COPY .npmrc ./.npmrc
RUN npm ci --omit=dev

# Next.js standalone runtime layout
COPY --from=build /app/public ./public
COPY --from=build /app/.next/standalone ./
COPY --from=build /app/.next/static ./.next/static

# Runtime env for server-side routes (read by app code)
ARG NEXT_PUBLIC_API_BASE_URL
ENV NEXT_PUBLIC_API_BASE_URL=$NEXT_PUBLIC_API_BASE_URL
ARG NEXT_PUBLIC_BASE_URL
ENV NEXT_PUBLIC_BASE_URL=$NEXT_PUBLIC_BASE_URL
ARG NEXT_PUBLIC_BASE_PATH
ENV NEXT_PUBLIC_BASE_PATH=$NEXT_PUBLIC_BASE_PATH

# Drop privileges
USER nodeuser

EXPOSE 3000
ENV PORT=3000
ENV HOSTNAME="0.0.0.0"
CMD ["node", "server.js"]
