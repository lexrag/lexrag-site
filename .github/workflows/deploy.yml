name: Deploy Marketing Site to S3 + CloudFront

on:
    push:
        branches:
            - main
            - feature/temporary_landing
    workflow_dispatch:
        inputs:
            branch:
                description: 'Branch to deploy (e.g. main or feature/temporary_landing)'
                required: true
                default: 'main'
            environment:
                description: 'Environment to deploy to'
                required: true
                default: 'production'
                type: choice
                options:
                    - production
                    - staging

env:
    AWS_REGION: ap-southeast-1
    S3_BUCKET: lexrag-marketing-site
    CLOUDFRONT_DISTRIBUTION_ID: E1D0DAN3LWZ4ER

jobs:
    deploy:
        name: Build & Deploy Marketing Site
        runs-on: ubuntu-latest

        permissions:
            id-token: write
            contents: read

        steps:
            - name: Set branch
              run: |
                  BRANCH="${{ github.event_name == 'workflow_dispatch' && github.event.inputs.branch || github.ref_name }}"
                  echo "BRANCH=$BRANCH" >> $GITHUB_ENV

            - name: Set environment
              run: |
                  ENVIRONMENT="${{ github.event_name == 'workflow_dispatch' && github.event.inputs.environment || 'production' }}"
                  echo "ENVIRONMENT=$ENVIRONMENT" >> $GITHUB_ENV

            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  ref: ${{ env.BRANCH }}

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '22.x'
                  cache: 'npm'

            - name: Install dependencies
              run: npm ci

            - name: Run linting
              run: npm run lint

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v2
              with:
                  role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
                  aws-region: ${{ env.AWS_REGION }}

            - name: Set environment variables
              run: |
                  if [ "${{ env.ENVIRONMENT }}" = "production" ]; then
                      echo "NEXT_PUBLIC_APP_URL=https://app.lexrag.com" >> $GITHUB_ENV
                      echo "NEXT_PUBLIC_APP_URL_DEV=https://app.lexrag.com" >> $GITHUB_ENV
                      echo "NEXT_PUBLIC_BASE_URL=https://lexrag.com" >> $GITHUB_ENV
                      echo "NEXT_PUBLIC_SEGMENT_DEBUG=false" >> $GITHUB_ENV
                      echo "NODE_ENV=production" >> $GITHUB_ENV
                  else
                      echo "NEXT_PUBLIC_APP_URL=https://app.lexrag.com" >> $GITHUB_ENV
                      echo "NEXT_PUBLIC_APP_URL_DEV=http://localhost:3000" >> $GITHUB_ENV
                      echo "NEXT_PUBLIC_BASE_URL=https://staging.lexrag.com" >> $GITHUB_ENV
                      echo "NEXT_PUBLIC_SEGMENT_DEBUG=true" >> $GITHUB_ENV
                      echo "NODE_ENV=staging" >> $GITHUB_ENV
                  fi

            - name: Build static site
              run: |
                  npm run build
              env:
                  NEXT_PUBLIC_APP_URL: ${{ env.NEXT_PUBLIC_APP_URL }}
                  NEXT_PUBLIC_APP_URL_DEV: ${{ env.NEXT_PUBLIC_APP_URL_DEV }}
                  NEXT_PUBLIC_BASE_URL: ${{ env.NEXT_PUBLIC_BASE_URL }}
                  NEXT_PUBLIC_BASE_PATH: ''
                  NEXT_PUBLIC_SEGMENT_ENABLED: true
                  NEXT_PUBLIC_SEGMENT_DEBUG: ${{ env.NEXT_PUBLIC_SEGMENT_DEBUG }}
                  NEXT_PUBLIC_SEGMENT_WRITE_KEY: ${{ secrets.NEXT_PUBLIC_SEGMENT_WRITE_KEY }}
                  NEXT_PUBLIC_ANALYTICS_VIA_BEACON: false
                  NEXT_PUBLIC_ANALYTICS_IDENTITY_FRONTEND: true
                  NEXT_PUBLIC_ANALYTICS_SAMPLE_VIEW_CHANGED: 1
                  NEXT_PUBLIC_ANALYTICS_DISABLE_PULSES: false
                  NEXT_PUBLIC_ANALYTICS_SAMPLE_CONTENT_PULSES: 1
                  NODE_ENV: ${{ env.NODE_ENV }}

            - name: Deploy to S3
              run: |
                  aws s3 sync out/ s3://${{ env.S3_BUCKET }} --delete --cache-control "public, max-age=31536000, immutable"
                  aws s3 cp out/ s3://${{ env.S3_BUCKET }} --recursive --exclude "*" --include "*.html" --cache-control "public, max-age=0, no-cache, no-store, must-revalidate"
                  aws s3 cp out/ s3://${{ env.S3_BUCKET }} --recursive --exclude "*" --include "*.xml" --cache-control "public, max-age=0, no-cache, no-store, must-revalidate"

            - name: Invalidate CloudFront cache
              run: |
                  aws cloudfront create-invalidation \
                      --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION_ID }} \
                      --paths "/*"

            - name: Deploy complete
              run: |
                  echo "‚úÖ Deployment to ${{ env.ENVIRONMENT }} completed successfully!"
                  echo "üåê Site URL: ${{ env.NEXT_PUBLIC_BASE_URL }}"
                  echo "üìä CloudFront Distribution: ${{ env.CLOUDFRONT_DISTRIBUTION_ID }}"
